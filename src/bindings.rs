#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    fn test_field__flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
    }
    test_field__flags();
    fn test_field__IO_read_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
    }
    test_field__IO_read_ptr();
    fn test_field__IO_read_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
    }
    test_field__IO_read_end();
    fn test_field__IO_read_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
    }
    test_field__IO_read_base();
    fn test_field__IO_write_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
    }
    test_field__IO_write_base();
    fn test_field__IO_write_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
    }
    test_field__IO_write_ptr();
    fn test_field__IO_write_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
    }
    test_field__IO_write_end();
    fn test_field__IO_buf_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
    }
    test_field__IO_buf_base();
    fn test_field__IO_buf_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
    }
    test_field__IO_buf_end();
    fn test_field__IO_save_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
    }
    test_field__IO_save_base();
    fn test_field__IO_backup_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
    }
    test_field__IO_backup_base();
    fn test_field__IO_save_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
    }
    test_field__IO_save_end();
    fn test_field__markers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
    }
    test_field__markers();
    fn test_field__chain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
    }
    test_field__chain();
    fn test_field__fileno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
    }
    test_field__fileno();
    fn test_field__flags2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
    }
    test_field__flags2();
    fn test_field__old_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
    }
    test_field__old_offset();
    fn test_field__cur_column() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
    }
    test_field__cur_column();
    fn test_field__vtable_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize
            },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
    }
    test_field__vtable_offset();
    fn test_field__shortbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize
            },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
    }
    test_field__shortbuf();
    fn test_field__lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
    }
    test_field__lock();
    fn test_field__offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
    }
    test_field__offset();
    fn test_field__codecvt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
    }
    test_field__codecvt();
    fn test_field__wide_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
    }
    test_field__wide_data();
    fn test_field__freeres_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
    }
    test_field__freeres_list();
    fn test_field__freeres_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
    }
    test_field__freeres_buf();
    fn test_field___pad5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
    }
    test_field___pad5();
    fn test_field__mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
    }
    test_field__mode();
    fn test_field__unused2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    test_field__unused2();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idx_seq_t {
    pub name: *mut ::std::os::raw::c_char,
    pub offset: u64,
    pub len: u32,
    pub is_alt: u32,
}
#[test]
fn bindgen_test_layout_mm_idx_seq_t() {
    assert_eq!(
        ::std::mem::size_of::<mm_idx_seq_t>(),
        24usize,
        concat!("Size of: ", stringify!(mm_idx_seq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_idx_seq_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mm_idx_seq_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_seq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_seq_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_seq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_seq_t),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_seq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_seq_t),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_is_alt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_seq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_alt) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_seq_t),
                "::",
                stringify!(is_alt)
            )
        );
    }
    test_field_is_alt();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idx_t {
    pub b: i32,
    pub w: i32,
    pub k: i32,
    pub flag: i32,
    pub n_seq: u32,
    pub index: i32,
    pub n_alt: i32,
    pub seq: *mut mm_idx_seq_t,
    pub S: *mut u32,
    pub B: *mut mm_idx_bucket_s,
    pub I: *mut mm_idx_intv_s,
    pub km: *mut ::std::os::raw::c_void,
    pub h: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mm_idx_t() {
    assert_eq!(
        ::std::mem::size_of::<mm_idx_t>(),
        80usize,
        concat!("Size of: ", stringify!(mm_idx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_idx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mm_idx_t))
    );
    fn test_field_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(b)
            )
        );
    }
    test_field_b();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field_k() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(k)
            )
        );
    }
    test_field_k();
    fn test_field_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(flag)
            )
        );
    }
    test_field_flag();
    fn test_field_n_seq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).n_seq) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(n_seq)
            )
        );
    }
    test_field_n_seq();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_n_alt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).n_alt) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(n_alt)
            )
        );
    }
    test_field_n_alt();
    fn test_field_seq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(seq)
            )
        );
    }
    test_field_seq();
    fn test_field_S() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).S) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(S)
            )
        );
    }
    test_field_S();
    fn test_field_B() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).B) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(B)
            )
        );
    }
    test_field_B();
    fn test_field_I() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).I) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(I)
            )
        );
    }
    test_field_I();
    fn test_field_km() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).km) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(km)
            )
        );
    }
    test_field_km();
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_t),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
}
#[repr(C)]
#[derive(Debug)]
pub struct mm_extra_t {
    pub capacity: u32,
    pub dp_score: i32,
    pub dp_max: i32,
    pub dp_max2: i32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub n_cigar: u32,
    pub cigar: __IncompleteArrayField<u32>,
}
#[test]
fn bindgen_test_layout_mm_extra_t() {
    assert_eq!(
        ::std::mem::size_of::<mm_extra_t>(),
        24usize,
        concat!("Size of: ", stringify!(mm_extra_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_extra_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mm_extra_t))
    );
    fn test_field_capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_extra_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_extra_t),
                "::",
                stringify!(capacity)
            )
        );
    }
    test_field_capacity();
    fn test_field_dp_score() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_extra_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dp_score) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_extra_t),
                "::",
                stringify!(dp_score)
            )
        );
    }
    test_field_dp_score();
    fn test_field_dp_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_extra_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dp_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_extra_t),
                "::",
                stringify!(dp_max)
            )
        );
    }
    test_field_dp_max();
    fn test_field_dp_max2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_extra_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dp_max2) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_extra_t),
                "::",
                stringify!(dp_max2)
            )
        );
    }
    test_field_dp_max2();
    fn test_field_n_cigar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_extra_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).n_cigar) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_extra_t),
                "::",
                stringify!(n_cigar)
            )
        );
    }
    test_field_n_cigar();
    fn test_field_cigar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_extra_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cigar) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_extra_t),
                "::",
                stringify!(cigar)
            )
        );
    }
    test_field_cigar();
}
impl mm_extra_t {
    #[inline]
    pub fn n_ambi(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_n_ambi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn trans_strand(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_trans_strand(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(n_ambi: u32, trans_strand: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let n_ambi: u32 = unsafe { ::std::mem::transmute(n_ambi) };
            n_ambi as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let trans_strand: u32 = unsafe { ::std::mem::transmute(trans_strand) };
            trans_strand as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_reg1_t {
    pub id: i32,
    pub cnt: i32,
    pub rid: i32,
    pub score: i32,
    pub qs: i32,
    pub qe: i32,
    pub rs: i32,
    pub re: i32,
    pub parent: i32,
    pub subsc: i32,
    pub as_: i32,
    pub mlen: i32,
    pub blen: i32,
    pub n_sub: i32,
    pub score0: i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub hash: u32,
    pub div: f32,
    pub p: *mut mm_extra_t,
}
#[test]
fn bindgen_test_layout_mm_reg1_t() {
    assert_eq!(
        ::std::mem::size_of::<mm_reg1_t>(),
        80usize,
        concat!("Size of: ", stringify!(mm_reg1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_reg1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mm_reg1_t))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_cnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cnt) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(cnt)
            )
        );
    }
    test_field_cnt();
    fn test_field_rid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(rid)
            )
        );
    }
    test_field_rid();
    fn test_field_score() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).score) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(score)
            )
        );
    }
    test_field_score();
    fn test_field_qs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qs) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(qs)
            )
        );
    }
    test_field_qs();
    fn test_field_qe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qe) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(qe)
            )
        );
    }
    test_field_qe();
    fn test_field_rs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rs) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(rs)
            )
        );
    }
    test_field_rs();
    fn test_field_re() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).re) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(re)
            )
        );
    }
    test_field_re();
    fn test_field_parent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(parent)
            )
        );
    }
    test_field_parent();
    fn test_field_subsc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).subsc) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(subsc)
            )
        );
    }
    test_field_subsc();
    fn test_field_as() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(as_)
            )
        );
    }
    test_field_as();
    fn test_field_mlen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mlen) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(mlen)
            )
        );
    }
    test_field_mlen();
    fn test_field_blen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blen) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(blen)
            )
        );
    }
    test_field_blen();
    fn test_field_n_sub() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).n_sub) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(n_sub)
            )
        );
    }
    test_field_n_sub();
    fn test_field_score0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).score0) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(score0)
            )
        );
    }
    test_field_score0();
    fn test_field_hash() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(hash)
            )
        );
    }
    test_field_hash();
    fn test_field_div() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).div) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(div)
            )
        );
    }
    test_field_div();
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_reg1_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_reg1_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
}
impl mm_reg1_t {
    #[inline]
    pub fn mapq(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mapq(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn split(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_split(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rev(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rev(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn inv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sam_pri(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sam_pri(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn proper_frag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proper_frag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pe_thru(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pe_thru(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_split(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_split(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_seg_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn split_inv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_split_inv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_alt(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_alt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn strand_retained(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_strand_retained(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dummy(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_dummy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mapq: u32,
        split: u32,
        rev: u32,
        inv: u32,
        sam_pri: u32,
        proper_frag: u32,
        pe_thru: u32,
        seg_split: u32,
        seg_id: u32,
        split_inv: u32,
        is_alt: u32,
        strand_retained: u32,
        dummy: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let mapq: u32 = unsafe { ::std::mem::transmute(mapq) };
            mapq as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let split: u32 = unsafe { ::std::mem::transmute(split) };
            split as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rev: u32 = unsafe { ::std::mem::transmute(rev) };
            rev as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let inv: u32 = unsafe { ::std::mem::transmute(inv) };
            inv as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let sam_pri: u32 = unsafe { ::std::mem::transmute(sam_pri) };
            sam_pri as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let proper_frag: u32 = unsafe { ::std::mem::transmute(proper_frag) };
            proper_frag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let pe_thru: u32 = unsafe { ::std::mem::transmute(pe_thru) };
            pe_thru as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let seg_split: u32 = unsafe { ::std::mem::transmute(seg_split) };
            seg_split as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let seg_id: u32 = unsafe { ::std::mem::transmute(seg_id) };
            seg_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let split_inv: u32 = unsafe { ::std::mem::transmute(split_inv) };
            split_inv as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let is_alt: u32 = unsafe { ::std::mem::transmute(is_alt) };
            is_alt as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let strand_retained: u32 = unsafe { ::std::mem::transmute(strand_retained) };
            strand_retained as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let dummy: u32 = unsafe { ::std::mem::transmute(dummy) };
            dummy as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idxopt_t {
    pub k: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_short,
    pub flag: ::std::os::raw::c_short,
    pub bucket_bits: ::std::os::raw::c_short,
    pub mini_batch_size: i64,
    pub batch_size: u64,
}
#[test]
fn bindgen_test_layout_mm_idxopt_t() {
    assert_eq!(
        ::std::mem::size_of::<mm_idxopt_t>(),
        24usize,
        concat!("Size of: ", stringify!(mm_idxopt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_idxopt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mm_idxopt_t))
    );
    fn test_field_k() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idxopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idxopt_t),
                "::",
                stringify!(k)
            )
        );
    }
    test_field_k();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idxopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idxopt_t),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idxopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idxopt_t),
                "::",
                stringify!(flag)
            )
        );
    }
    test_field_flag();
    fn test_field_bucket_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idxopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bucket_bits) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idxopt_t),
                "::",
                stringify!(bucket_bits)
            )
        );
    }
    test_field_bucket_bits();
    fn test_field_mini_batch_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idxopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mini_batch_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idxopt_t),
                "::",
                stringify!(mini_batch_size)
            )
        );
    }
    test_field_mini_batch_size();
    fn test_field_batch_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idxopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).batch_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idxopt_t),
                "::",
                stringify!(batch_size)
            )
        );
    }
    test_field_batch_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_mapopt_t {
    pub flag: i64,
    pub seed: ::std::os::raw::c_int,
    pub sdust_thres: ::std::os::raw::c_int,
    pub max_qlen: ::std::os::raw::c_int,
    pub bw: ::std::os::raw::c_int,
    pub bw_long: ::std::os::raw::c_int,
    pub max_gap: ::std::os::raw::c_int,
    pub max_gap_ref: ::std::os::raw::c_int,
    pub max_frag_len: ::std::os::raw::c_int,
    pub max_chain_skip: ::std::os::raw::c_int,
    pub max_chain_iter: ::std::os::raw::c_int,
    pub min_cnt: ::std::os::raw::c_int,
    pub min_chain_score: ::std::os::raw::c_int,
    pub chain_gap_scale: f32,
    pub chain_skip_scale: f32,
    pub rmq_size_cap: ::std::os::raw::c_int,
    pub rmq_inner_dist: ::std::os::raw::c_int,
    pub rmq_rescue_size: ::std::os::raw::c_int,
    pub rmq_rescue_ratio: f32,
    pub mask_level: f32,
    pub mask_len: ::std::os::raw::c_int,
    pub pri_ratio: f32,
    pub best_n: ::std::os::raw::c_int,
    pub alt_drop: f32,
    pub a: ::std::os::raw::c_int,
    pub b: ::std::os::raw::c_int,
    pub q: ::std::os::raw::c_int,
    pub e: ::std::os::raw::c_int,
    pub q2: ::std::os::raw::c_int,
    pub e2: ::std::os::raw::c_int,
    pub sc_ambi: ::std::os::raw::c_int,
    pub noncan: ::std::os::raw::c_int,
    pub junc_bonus: ::std::os::raw::c_int,
    pub zdrop: ::std::os::raw::c_int,
    pub zdrop_inv: ::std::os::raw::c_int,
    pub end_bonus: ::std::os::raw::c_int,
    pub min_dp_max: ::std::os::raw::c_int,
    pub min_ksw_len: ::std::os::raw::c_int,
    pub anchor_ext_len: ::std::os::raw::c_int,
    pub anchor_ext_shift: ::std::os::raw::c_int,
    pub max_clip_ratio: f32,
    pub rank_min_len: ::std::os::raw::c_int,
    pub rank_frac: f32,
    pub pe_ori: ::std::os::raw::c_int,
    pub pe_bonus: ::std::os::raw::c_int,
    pub mid_occ_frac: f32,
    pub q_occ_frac: f32,
    pub min_mid_occ: i32,
    pub max_mid_occ: i32,
    pub mid_occ: i32,
    pub max_occ: i32,
    pub max_max_occ: i32,
    pub occ_dist: i32,
    pub mini_batch_size: i64,
    pub max_sw_mat: i64,
    pub cap_kalloc: i64,
    pub split_prefix: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mm_mapopt_t() {
    assert_eq!(
        ::std::mem::size_of::<mm_mapopt_t>(),
        248usize,
        concat!("Size of: ", stringify!(mm_mapopt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_mapopt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mm_mapopt_t))
    );
    fn test_field_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(flag)
            )
        );
    }
    test_field_flag();
    fn test_field_seed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seed) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(seed)
            )
        );
    }
    test_field_seed();
    fn test_field_sdust_thres() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sdust_thres) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(sdust_thres)
            )
        );
    }
    test_field_sdust_thres();
    fn test_field_max_qlen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_qlen) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_qlen)
            )
        );
    }
    test_field_max_qlen();
    fn test_field_bw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bw) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(bw)
            )
        );
    }
    test_field_bw();
    fn test_field_bw_long() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bw_long) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(bw_long)
            )
        );
    }
    test_field_bw_long();
    fn test_field_max_gap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_gap) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_gap)
            )
        );
    }
    test_field_max_gap();
    fn test_field_max_gap_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_gap_ref) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_gap_ref)
            )
        );
    }
    test_field_max_gap_ref();
    fn test_field_max_frag_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_frag_len) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_frag_len)
            )
        );
    }
    test_field_max_frag_len();
    fn test_field_max_chain_skip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_chain_skip) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_chain_skip)
            )
        );
    }
    test_field_max_chain_skip();
    fn test_field_max_chain_iter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_chain_iter) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_chain_iter)
            )
        );
    }
    test_field_max_chain_iter();
    fn test_field_min_cnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_cnt) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(min_cnt)
            )
        );
    }
    test_field_min_cnt();
    fn test_field_min_chain_score() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_chain_score) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(min_chain_score)
            )
        );
    }
    test_field_min_chain_score();
    fn test_field_chain_gap_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).chain_gap_scale) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(chain_gap_scale)
            )
        );
    }
    test_field_chain_gap_scale();
    fn test_field_chain_skip_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).chain_skip_scale) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(chain_skip_scale)
            )
        );
    }
    test_field_chain_skip_scale();
    fn test_field_rmq_size_cap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rmq_size_cap) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(rmq_size_cap)
            )
        );
    }
    test_field_rmq_size_cap();
    fn test_field_rmq_inner_dist() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rmq_inner_dist) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(rmq_inner_dist)
            )
        );
    }
    test_field_rmq_inner_dist();
    fn test_field_rmq_rescue_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rmq_rescue_size) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(rmq_rescue_size)
            )
        );
    }
    test_field_rmq_rescue_size();
    fn test_field_rmq_rescue_ratio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rmq_rescue_ratio) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(rmq_rescue_ratio)
            )
        );
    }
    test_field_rmq_rescue_ratio();
    fn test_field_mask_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask_level) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(mask_level)
            )
        );
    }
    test_field_mask_level();
    fn test_field_mask_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask_len) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(mask_len)
            )
        );
    }
    test_field_mask_len();
    fn test_field_pri_ratio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pri_ratio) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(pri_ratio)
            )
        );
    }
    test_field_pri_ratio();
    fn test_field_best_n() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).best_n) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(best_n)
            )
        );
    }
    test_field_best_n();
    fn test_field_alt_drop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).alt_drop) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(alt_drop)
            )
        );
    }
    test_field_alt_drop();
    fn test_field_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(a)
            )
        );
    }
    test_field_a();
    fn test_field_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(b)
            )
        );
    }
    test_field_b();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
    fn test_field_e() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(e)
            )
        );
    }
    test_field_e();
    fn test_field_q2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q2) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(q2)
            )
        );
    }
    test_field_q2();
    fn test_field_e2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e2) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(e2)
            )
        );
    }
    test_field_e2();
    fn test_field_sc_ambi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc_ambi) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(sc_ambi)
            )
        );
    }
    test_field_sc_ambi();
    fn test_field_noncan() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).noncan) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(noncan)
            )
        );
    }
    test_field_noncan();
    fn test_field_junc_bonus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).junc_bonus) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(junc_bonus)
            )
        );
    }
    test_field_junc_bonus();
    fn test_field_zdrop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zdrop) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(zdrop)
            )
        );
    }
    test_field_zdrop();
    fn test_field_zdrop_inv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zdrop_inv) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(zdrop_inv)
            )
        );
    }
    test_field_zdrop_inv();
    fn test_field_end_bonus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end_bonus) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(end_bonus)
            )
        );
    }
    test_field_end_bonus();
    fn test_field_min_dp_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_dp_max) as usize - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(min_dp_max)
            )
        );
    }
    test_field_min_dp_max();
    fn test_field_min_ksw_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_ksw_len) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(min_ksw_len)
            )
        );
    }
    test_field_min_ksw_len();
    fn test_field_anchor_ext_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).anchor_ext_len) as usize - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(anchor_ext_len)
            )
        );
    }
    test_field_anchor_ext_len();
    fn test_field_anchor_ext_shift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).anchor_ext_shift) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(anchor_ext_shift)
            )
        );
    }
    test_field_anchor_ext_shift();
    fn test_field_max_clip_ratio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_clip_ratio) as usize - ptr as usize
            },
            164usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_clip_ratio)
            )
        );
    }
    test_field_max_clip_ratio();
    fn test_field_rank_min_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rank_min_len) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(rank_min_len)
            )
        );
    }
    test_field_rank_min_len();
    fn test_field_rank_frac() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rank_frac) as usize - ptr as usize
            },
            172usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(rank_frac)
            )
        );
    }
    test_field_rank_frac();
    fn test_field_pe_ori() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pe_ori) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(pe_ori)
            )
        );
    }
    test_field_pe_ori();
    fn test_field_pe_bonus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pe_bonus) as usize - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(pe_bonus)
            )
        );
    }
    test_field_pe_bonus();
    fn test_field_mid_occ_frac() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mid_occ_frac) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(mid_occ_frac)
            )
        );
    }
    test_field_mid_occ_frac();
    fn test_field_q_occ_frac() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q_occ_frac) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(q_occ_frac)
            )
        );
    }
    test_field_q_occ_frac();
    fn test_field_min_mid_occ() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_mid_occ) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(min_mid_occ)
            )
        );
    }
    test_field_min_mid_occ();
    fn test_field_max_mid_occ() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_mid_occ) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_mid_occ)
            )
        );
    }
    test_field_max_mid_occ();
    fn test_field_mid_occ() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mid_occ) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(mid_occ)
            )
        );
    }
    test_field_mid_occ();
    fn test_field_max_occ() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_occ) as usize - ptr as usize
            },
            204usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_occ)
            )
        );
    }
    test_field_max_occ();
    fn test_field_max_max_occ() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_max_occ) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_max_occ)
            )
        );
    }
    test_field_max_max_occ();
    fn test_field_occ_dist() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).occ_dist) as usize - ptr as usize
            },
            212usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(occ_dist)
            )
        );
    }
    test_field_occ_dist();
    fn test_field_mini_batch_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mini_batch_size) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(mini_batch_size)
            )
        );
    }
    test_field_mini_batch_size();
    fn test_field_max_sw_mat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_sw_mat) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(max_sw_mat)
            )
        );
    }
    test_field_max_sw_mat();
    fn test_field_cap_kalloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cap_kalloc) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(cap_kalloc)
            )
        );
    }
    test_field_cap_kalloc();
    fn test_field_split_prefix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_mapopt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).split_prefix) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_mapopt_t),
                "::",
                stringify!(split_prefix)
            )
        );
    }
    test_field_split_prefix();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mm_idx_reader_t {
    pub is_idx: ::std::os::raw::c_int,
    pub n_parts: ::std::os::raw::c_int,
    pub idx_size: i64,
    pub opt: mm_idxopt_t,
    pub fp_out: *mut FILE,
    pub fp: mm_idx_reader_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mm_idx_reader_t__bindgen_ty_1 {
    pub seq: *mut mm_bseq_file_s,
    pub idx: *mut FILE,
}
#[test]
fn bindgen_test_layout_mm_idx_reader_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mm_idx_reader_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mm_idx_reader_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_idx_reader_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mm_idx_reader_t__bindgen_ty_1))
    );
    fn test_field_seq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_reader_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_reader_t__bindgen_ty_1),
                "::",
                stringify!(seq)
            )
        );
    }
    test_field_seq();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_reader_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_reader_t__bindgen_ty_1),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
}
#[test]
fn bindgen_test_layout_mm_idx_reader_t() {
    assert_eq!(
        ::std::mem::size_of::<mm_idx_reader_t>(),
        56usize,
        concat!("Size of: ", stringify!(mm_idx_reader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mm_idx_reader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mm_idx_reader_t))
    );
    fn test_field_is_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_reader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_idx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_reader_t),
                "::",
                stringify!(is_idx)
            )
        );
    }
    test_field_is_idx();
    fn test_field_n_parts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_reader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).n_parts) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_reader_t),
                "::",
                stringify!(n_parts)
            )
        );
    }
    test_field_n_parts();
    fn test_field_idx_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_reader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_reader_t),
                "::",
                stringify!(idx_size)
            )
        );
    }
    test_field_idx_size();
    fn test_field_opt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_reader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_reader_t),
                "::",
                stringify!(opt)
            )
        );
    }
    test_field_opt();
    fn test_field_fp_out() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_reader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fp_out) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_reader_t),
                "::",
                stringify!(fp_out)
            )
        );
    }
    test_field_fp_out();
    fn test_field_fp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mm_idx_reader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fp) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mm_idx_reader_t),
                "::",
                stringify!(fp)
            )
        );
    }
    test_field_fp();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_tbuf_s {
    _unused: [u8; 0],
}
pub type mm_tbuf_t = mm_tbuf_s;
extern "C" {
    pub static mut mm_verbose: ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set default or preset parameters"]
    #[doc = ""]
    #[doc = " @param preset     NULL to set all parameters as default; otherwise apply preset to affected parameters"]
    #[doc = " @param io         pointer to indexing parameters"]
    #[doc = " @param mo         pointer to mapping parameters"]
    #[doc = ""]
    #[doc = " @return 0 if success; -1 if _present_ unknown"]
    pub fn mm_set_opt(
        preset: *const ::std::os::raw::c_char,
        io: *mut mm_idxopt_t,
        mo: *mut mm_mapopt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Update mm_mapopt_t::mid_occ via mm_mapopt_t::mid_occ_frac"]
    #[doc = ""]
    #[doc = " If mm_mapopt_t::mid_occ is 0, this function sets it to a number such that no"]
    #[doc = " more than mm_mapopt_t::mid_occ_frac of minimizers in the index have a higher"]
    #[doc = " occurrence."]
    #[doc = ""]
    #[doc = " @param opt        mapping parameters"]
    #[doc = " @param mi         minimap2 index"]
    pub fn mm_mapopt_update(opt: *mut mm_mapopt_t, mi: *const mm_idx_t);
}
extern "C" {
    #[doc = " Initialize an index reader"]
    #[doc = ""]
    #[doc = " @param fn         index or fasta/fastq file name (this function tests the file type)"]
    #[doc = " @param opt        indexing parameters"]
    #[doc = " @param fn_out     if not NULL, write built index to this file"]
    #[doc = ""]
    #[doc = " @return an index reader on success; NULL if fail to open _fn_"]
    pub fn mm_idx_reader_open(
        fn_: *const ::std::os::raw::c_char,
        opt: *const mm_idxopt_t,
        fn_out: *const ::std::os::raw::c_char,
    ) -> *mut mm_idx_reader_t;
}
extern "C" {
    #[doc = " Read/build an index"]
    #[doc = ""]
    #[doc = " If the input file is an index file, this function reads one part of the"]
    #[doc = " index and returns. If the input file is a sequence file (fasta or fastq),"]
    #[doc = " this function constructs the index for about mm_idxopt_t::batch_size bases."]
    #[doc = " Importantly, for a huge collection of sequences, this function may only"]
    #[doc = " return an index for part of sequences. It needs to be repeatedly called"]
    #[doc = " to traverse the entire index/sequence file."]
    #[doc = ""]
    #[doc = " @param r          index reader"]
    #[doc = " @param n_threads  number of threads for constructing index"]
    #[doc = ""]
    #[doc = " @return an index on success; NULL if reaching the end of the input file"]
    pub fn mm_idx_reader_read(
        r: *mut mm_idx_reader_t,
        n_threads: ::std::os::raw::c_int,
    ) -> *mut mm_idx_t;
}
extern "C" {
    #[doc = " Destroy/deallocate an index reader"]
    #[doc = ""]
    #[doc = " @param r          index reader"]
    pub fn mm_idx_reader_close(r: *mut mm_idx_reader_t);
}
extern "C" {
    #[doc = " Destroy/deallocate an index"]
    #[doc = ""]
    #[doc = " @param r          minimap2 index"]
    pub fn mm_idx_destroy(mi: *mut mm_idx_t);
}
extern "C" {
    #[doc = " Initialize a thread-local buffer for mapping"]
    #[doc = ""]
    #[doc = " Each mapping thread requires a buffer specific to the thread (see mm_map()"]
    #[doc = " below). The primary purpose of this buffer is to reduce frequent heap"]
    #[doc = " allocations across threads. A buffer shall not be used by two or more"]
    #[doc = " threads."]
    #[doc = ""]
    #[doc = " @return pointer to a thread-local buffer"]
    pub fn mm_tbuf_init() -> *mut mm_tbuf_t;
}
extern "C" {
    #[doc = " Destroy/deallocate a thread-local buffer for mapping"]
    #[doc = ""]
    #[doc = " @param b          the buffer"]
    pub fn mm_tbuf_destroy(b: *mut mm_tbuf_t);
}
extern "C" {
    #[doc = " Align a query sequence against an index"]
    #[doc = ""]
    #[doc = " This function possibly finds multiple alignments of the query sequence."]
    #[doc = " The returned array and the mm_reg1_t::p field of each element are allocated"]
    #[doc = " with malloc()."]
    #[doc = ""]
    #[doc = " @param mi         minimap2 index"]
    #[doc = " @param l_seq      length of the query sequence"]
    #[doc = " @param seq        the query sequence"]
    #[doc = " @param n_regs     number of hits (out)"]
    #[doc = " @param b          thread-local buffer; two mm_map() calls shall not use one buffer at the same time!"]
    #[doc = " @param opt        mapping parameters"]
    #[doc = " @param name       query name, used for all-vs-all overlapping and debugging"]
    #[doc = ""]
    #[doc = " @return an array of hits which need to be deallocated with free() together"]
    #[doc = "         with mm_reg1_t::p of each element. The size is written to _n_regs_."]
    pub fn mm_map(
        mi: *const mm_idx_t,
        l_seq: ::std::os::raw::c_int,
        seq: *const ::std::os::raw::c_char,
        n_regs: *mut ::std::os::raw::c_int,
        b: *mut mm_tbuf_t,
        opt: *const mm_mapopt_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut mm_reg1_t;
}
extern "C" {
    pub fn mm_idx_index_name(mi: *mut mm_idx_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idx_bucket_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idx_intv_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_bseq_file_s {
    pub _address: u8,
}
